<!---->
<template>
  <ui-page>
    <ui-nav-bar slot="nav-bar" class="nav_bar">
      <ui-row height="46">
        <ui-col vertical-align="middle" align="left" space-left="10" width="50" bindtap="navigateBack">
          <ui-icon type="arrow-left" size="20" color="#126DFE"></ui-icon>
        </ui-col>
        <ui-col vertical-align="middle" align="center">
          <ui-view class="nav_title">人脸识别照片</ui-view>
        </ui-col>
        <ui-col vertical-align="middle" align="center" width="50"></ui-col>
      </ui-row>
    </ui-nav-bar>

    <ui-view ui:if="{{ isHasFaceImg }}">
      <ui-view style="{{ { height:faceHeight + 'px'} }}" class="preview">
        <ui-image src="{{ faceImgBase64 }}"  mode="aspectFit"></ui-image>
      </ui-view>
      <ui-view class="btn_content">
        <ui-button form-type="submit" type="primary" class="submit" bindtap="uploadFaceImg">更新人脸照片</ui-button>
      </ui-view>
    </ui-view>
    <ui-view ui:else>
      <ui-view class="without_img" style="{{ { height: faceHeight + 'px'} }}">
        <ui-view class="show_tip">
          <ui-icon type="renlian2" size="100" color="#1F95FF"></ui-icon>
          <ui-view class="img_title">上传人脸照片，体验智能签到</ui-view>
        </ui-view>
      </ui-view>
      <ui-view class="btn_content">
        <ui-button form-type="submit" type="primary" class="submit" bindtap="uploadFaceImg">上传人脸照片</ui-button>
      </ui-view>
    </ui-view>

  </ui-page>
</template>

<script>

const sourceType = [
  ['camera'],
  ['album'],
  ['camera', 'album']
]
const sizeType = [
  ['compressed'],
  ['original'],
  ['compressed', 'original']
]
const uploadFaceUrl = 'user/face/base64' // 上传用户基准照片
const getFaceImgUrl = 'user/face/base64' // 获取用户基准照片

import lrz from '#/static/utils/lrz' // 压缩图片库

export default {
  config: {
    navigationStyle: "custom"
  },
  data() {
    return {
      faceHeight: ui.DEFAULT_CONTENT_HEIGHT * 0.7,
      tokenId: '',
      isHasFaceImg: false,
      faceImgBase64: ''
    }
  },
  methods: {
    navigateBack () {
      ui.navigateBack()
    },
    uploadFaceImg () {
      this.chooseImage(2)
    },
    chooseImage (index) {
      console.log("选择人脸照片")
      let that = this
      // console.log('之前的：',that.faceImgBase64)
      ui.chooseImage({
        sourceType: sourceType[index],
        sizeType: sizeType[0],
        success: function (res) {
          var imagePath = res.tempFilePaths[0]
          console.log("图片路径：", imagePath)
          // 开始压缩
          lrz(imagePath)
            .then((rst) => {
                // 处理成功会执行
                console.log("压缩成功",rst)
                that.isHasFaceImg = true
                that.faceImgBase64 = rst.base64
                // console.log('之后的：',that.faceImgBase64)

                ui.request({
                  url: uploadFaceUrl,
                  data: {
                    'img': that.faceImgBase64.split(',')[1],
                    // 'base64Len': base64Len
                  },
                  method: 'POST',
                  header: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + that.tokenId
                  },
                  success: (result) => {
                    console.log("上传base64编码成功 result:",result)
                    ui.showToast({ title: '上传成功' , icon: 'success' })

                    // 更新本地信息
                    let LocalUserInfo = ui.getStorageSync('LocalUserInfo')
                    LocalUserInfo.isHasFaceImg = true
                    LocalUserInfo.faceImgBase64 = that.faceImgBase64
                    ui.setStorageSync('LocalUserInfo', LocalUserInfo)
                    console.log("修改后的 LocalUserInfo :" , LocalUserInfo)

                  },
                  fail: function ({ errMsg }) {
                    ui.showToast({ title: '上传失败' })
                    console.log("上传失败：",errMsg)
                  }
                })

            })
            .catch(function (err){
                // 处理失败会执行
                console.log("压缩失败",err)
                ui.showToast({ title: '图片压缩失败' })
            })
            .always(function () {
                // 不管是成功失败，都会执行
                console.log("执行压缩")
            });
        },
        fail: function ({ errMsg }) {
          console.log("选择照片失败")
          ui.showToast({ title: '选择照片失败' })
        }
      })
    },
    // 获取用户人脸照片
    getUserFaceImg () {
      let that = this
      console.log('获取用户人脸照片')
      ui.request({
        url: getFaceImgUrl,
        header: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + that.tokenId
        },
        method: 'GET',
        success: (result) => {
          console.log("获取用户人脸照片:",result)
          if(result.data.code === 2000){
            // console.log("获取用户人脸照片成功:",result.data.data.img)
            that.isHasFaceImg = true
            that.faceImgBase64 = 'data:image;base64,' + result.data.data.img

            // 获取 LocalUserInfo 数据，将头像数据赋值给他
            let LocalUserInfo = ui.getStorageSync('LocalUserInfo')
            LocalUserInfo.isHasFaceImg = true
            LocalUserInfo.faceImgBase64 = that.faceImgBase64
            ui.setStorageSync('LocalUserInfo', LocalUserInfo)
            
          }else{
            console.log("获取用户头像失败:", result)
          }
          
        },
        fail: ({ errMsg }) => {
          console.log("获取用户头像失败:", errMsg)
        }
      })
    }
  },
  mounted() {
    let LocalUserInfo = ui.getStorageSync('LocalUserInfo')
    console.log("人脸照片上传 mounted LocalUserInfo:",LocalUserInfo)

    if (LocalUserInfo !== null) {
      this.tokenId = LocalUserInfo.tokenId

      if(LocalUserInfo.isHasFaceImg){
        this.isHasFaceImg = true
        if(LocalUserInfo.faceImgBase64 === '') {
          this.getUserFaceImg()
        }else{
          this.faceImgBase64 = LocalUserInfo.faceImgBase64
        }
      }
    }
  }
}
</script>

<style lang="less">
.nav_bar {
  background: #fff;
  .nav_title {
    color: #000;
    font-size: 36rpx;
    font-weight: bold;
  }
}
.without_img {
  flex-grow: 1;
  display: -webkit-flex;
  display: flex;
  -webkit-align-items: center;
  align-items: center;
  -webkit-justify-content: center;
  justify-content: center;
  text-align: center;
  flex-grow: 1;
}
.btn_content{
  padding: 10px 20px 0 20px;
  .ui-input{
    border: 0;
  }
  .submit{
    margin-top: 10px;
  }
}

.preview{
  margin-top: 10px;
  .mix-flex-x-center();
}
</style>
