<!---->
<template>
  <ui-page>

    
    <ui-row height="40" space-top=20>
      <ui-col vertical-align="middle" space-left=20>
        当前本地数据：
      </ui-col>
    </ui-row>
    <ui-row space-top=20 space-bottom=20>
      <ui-col space-left=20>
        {{ userInfo }}
      </ui-col>
    </ui-row>
    <ui-button bindtap="clearUserInfo()">清除本地数据</ui-button>
  
  </ui-page>
</template>

<script>
export default {
  config: {
    navigationBarTitleText: "清除用户本地数据"
  },
  data() {
    return {
      userInfo: '没有数据'
    }
  },
  methods: {
    clearUserInfo () {
      ui.clearStorageSync()
      ui.showToast({title: '清除成功'})
    },
    // 格式化代码函数,已经用原生方式写好了不需要改动,直接引用就好
    formatJson (json, options) {
      var reg = null,
          formatted = '',
          pad = 0,
          PADDING = '    ';
      options = options || {};
      options.newlineAfterColonIfBeforeBraceOrBracket = (options.newlineAfterColonIfBeforeBraceOrBracket === true) ? true : false;
      options.spaceAfterColon = (options.spaceAfterColon === false) ? false : true;
      if (typeof json !== 'string') {
          json = JSON.stringify(json);
      } else {
          json = JSON.parse(json);
          json = JSON.stringify(json);
      }
      reg = /([\{\}])/g;
      json = json.replace(reg, '\r\n$1\r\n');
      reg = /([\[\]])/g;
      json = json.replace(reg, '\r\n$1\r\n');
      reg = /(\,)/g;
      json = json.replace(reg, '$1\r\n');
      reg = /(\r\n\r\n)/g;
      json = json.replace(reg, '\r\n');
      reg = /\r\n\,/g;
      json = json.replace(reg, ',');
      if (!options.newlineAfterColonIfBeforeBraceOrBracket) {
          reg = /\:\r\n\{/g;
          json = json.replace(reg, ':{');
          reg = /\:\r\n\[/g;
          json = json.replace(reg, ':[');
      }
      if (options.spaceAfterColon) {
          reg = /\:/g;
          json = json.replace(reg, ':');
      }
      (json.split('\r\n')).forEach(function(node, index) {
          var i = 0,
              indent = 0,
              padding = '';
          if (node.match(/\{$/) || node.match(/\[$/)) {
              indent = 1;
          } else if (node.match(/\}/) || node.match(/\]/)) {
              if (pad !== 0) {
                  pad -= 1;
              }
          } else {
              indent = 0;
          }
          for (i = 0; i < pad; i++) {
              padding += PADDING;
          }
          formatted += padding + node + '\r\n';
          pad += indent;
      });
      return formatted;
    }
  },
  mounted() {
    let LocalUserInfo = ui.getStorageSync('LocalUserInfo')
    this.userInfo = this.formatJson(LocalUserInfo)
  }
}
</script>

<style lang="less">

</style>
